=== Constructor edge cases ===
Keyword args: Template.__new__ only accepts positional arguments
Invalid type: Template args must be str or Interpolation, got int
Invalid interp: interpolations tuple must contain only Interpolation objects, got int
Varargs constructor: strings=('Hello ', '!'), values=('World',)
Varargs merged strings: ('AB', 'CD')
Leading interpolation strings: ('', ' tail')
Interpolation only strings: ('', '', '')

=== Binary operations ===
Template+str: can only concatenate string.templatelib.Template (not "str") to string.templatelib.Template
str+Template: can only concatenate str (not "string.templatelib.Template") to str
-: unsupported
*: unsupported
/: unsupported
%: unsupported
**: unsupported
&: unsupported
|: unsupported
^: unsupported
<<: unsupported
>>: unsupported

=== Edge cases ===
Empty strings: [Interpolation(1, 'a', None, ''), Interpolation(2, 'b', None, '')]
Adjacent: 'Template(strings=('', '', '', ''), interpolations=(Interpolation(1, '1', None, ''), Interpolation(2, '2', None, ''), Interpolation(3, '3', None, '')))'

=== Values property ===
Values[0]: ()
Values[3]: (0, 1, 2)
Values[6]: (0, 1, 2, 3, 4, 5)

=== Format spec edge cases ===
Empty fmt: Template(strings=('', ''), interpolations=(Interpolation(42, '42', None, ''),))
Interp fmt: 'Template(strings=('', ''), interpolations=(Interpolation(3.14, '3.14', None, '10.2f'),))'
Escaped braces: 'Template(strings=('Hello {name} and {{value}}',), interpolations=())'

=== Special cases ===
__template__ error: invalid interpolation format
__template__: Template
Interp read-only: AttributeError
Custom !r: Template(strings=('', ''), interpolations=(Interpolation(CustomRepr, 'obj', 'r', ''),))
Custom !s: Template(strings=('', ''), interpolations=(Interpolation(CustomRepr, 'obj', 's', ''),))
Iterator edge: ['Interpolation', 'Interpolation']

=== Bracket/paren depth tracking ===
Colon in key: expr=d['b:c'], value=2
Slice colon: expr=items[1:3], value=[20, 30]
Default arg colon: expr=pair(3), value=(3, ':')

=== Additional coverage tests ===
Raw path strings: ('Path: ', '\\n'), value=/usr/local/bin
Re-raised exception: Special error
Too many interpolations: SyntaxError
Triple quoted: 'Template(strings=('Triple "quoted" string',), interpolations=())'
Raw triple: 'Template(strings=('Raw triple\\n', ''), interpolations=(Interpolation(42, '42', None, ''),))'
Complex concat: strings=('a', 'bc', 'd', 'e'), values=(1, 2, 3)
Lonely string: SyntaxError

=== Unicode edge cases ===
Emoji: True
Unicode format: True

=== Nested template strings ===
Nested: Template

=== Inline template literal tests ===
Empty nested: Template
With content: Template
Nested interp: Template

=== Integer overflow test ===
Overflow test: OverflowError - template string too large for header format


=== Empty expression tests ===
Empty expr SyntaxError: t-string: valid expression required before '}'
Whitespace expr SyntaxError: t-string: valid expression required before '}'
Unterminated expr: SyntaxError
Long expression: OK
Template.__str__ with large string: OK
Nested interpolations error: SyntaxError: invalid syntax in template expression: nested{x}
Escaped braces result: Template(strings=('', ''), interpolations=(Interpolation(42, 'x', None, '5{literal}'),))

=== Expression parser tests ===
Complex expr: OK

=== Parser MemoryError ===
Parser MemoryError: MemoryError

=== Lexer edge cases ===
Lexer NULL case: Tested via heapalloc_fail_tstring.py

=== Format spec edge cases ===
Full format: 'Template(strings=('', ''), interpolations=(Interpolation(42, 'x', 'r', '0>+#10.5'),))'

=== Debug format edge cases ===
Debug with conv: 'Template(strings=('x=', ''), interpolations=(Interpolation(42, 'x', 'r', ''),))'

=== Raw t-string escape tests ===
Raw escapes: 'Template(strings=('\\x41\\u0042\\n\\t',), interpolations=())'

=== Interpolation attribute access ===
Value attr: test_value
Expression attr: test_expr
Conversion attr: s
Format spec attr: :>10

=== Template string concatenation ===
Concatenated strings: ('part1part2part3part4part5',)

=== Template interpolations attribute ===
Interpolations attr: (Interpolation('World', 'name', None, ''), Interpolation('Python', 'place', None, ''))

=== Parser allocation edge cases ===
Deep nesting: OK
Very long expression: OK

=== Additional parser regression tests ===
Raw nested spec: "QUOTED"
Escaped quote spec: "QUOTED"
Escaped backslash spec: \n
Literal brace strings: ('', '}}tail')
Unterminated field: t-string: expecting '}'

=== Template string size limit ===
Too many interpolations: template string too large for header format

=== Malformed format specs (valid in CPython) ===
Malformed 1: format_spec: '10!r', conversion: None
Malformed 2: format_spec: '^10!s', conversion: None
Invalid unicode: SyntaxError - invalid syntax
Custom exception re-raised: Test exception

NULL lexer: Tested in heapalloc_fail_tstring.py
\N{} escape: SyntaxError
Raw Unicode escapes: '\u0041\U00000042'
Trailing backslash: SyntaxError

=== __template__ edge cases ===
Max strings: OK, 4095 strings
Max interps error: OverflowError

=== vstr string concatenation ===
vstr concat: 'Template(strings=('part1part2part3part4', 'end'), interpolations=(Interpolation(1, 'x', None, ''),))'

=== High byte handling ===
High bytes: len=5, first=0x7f, last=0xff
Octal high bytes: OK, len=3

=== Debug specifier tests ===
Debug basic: strings=('value=', ''), conv=r
Debug !s: strings=('value=', ''), conv=s
Debug fmt: strings=('value=', ''), fmt_spec='>10'

=== Format spec with nested interpolation ===
Nested fmt spec: '10'

=== Trailing whitespace in expression ===
Trailing whitespace: OK

=== Deep nesting test ===
Deep nesting error: RuntimeError

=== Template + non-string object ===
Template + custom object: TypeError (correct)

=== 2-tuple constructor overflow ===
Too many strings (2-tuple): OverflowError (correct)

=== Too many segments ===
Too many segments: OverflowError (correct)

=== Multiple consecutive strings ===
Multiple strings concatenated: OK

=== Template.__add__ with multiple interpolations ===
Template.__add__: OK (40 interpolations)

=== Single closing brace ===
Single }: SyntaxError - t-string: single '}' is not allowed

=== Escape in string within interpolation ===
Escaped quote in string: OK

=== Format spec with special characters ===
Format spec '!r': True
Conversion is None: True

Coverage tests completed!
