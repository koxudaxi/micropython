=== Basic functionality ===
Template
Strings: ('Hello ', '')
Value: World
str(): Hello World
Raw: 'Path: C:\test\'
tr: 'Path: C:\test\'

=== Parser tests ===
Empty expr: SyntaxError - empty expression not allowed
Whitespace: 42
Complex: 1
None: None
True: True
False: False
Ellipsis: Ellipsis
Deep nest: 42

=== Conversions and formatting ===
repr: {'key': 'value'}
str: {'key': 'value'}
ascii: {'key': 'value'}
Width: '        42'
Precision: 3.14
Debug: x=42

=== Constructor tests ===
Empty: ('',)
Single: ('single',)
Multi: ('abc',)
Mixed: strings=('start', 'middle', 'end'), values=(1, 2)

=== Operations ===
Concat: 'Hello World'
Iterator: ['str', 'Interpolation', 'str', 'Interpolation', 'str']
strings attr: ('test', '')
interpolations attr: 1
values attr: (42,)
repr: Template(strings=(' World',), interpolations=())...

=== Error cases ===
Invalid syntax: SyntaxError
Long expr: Error
Mixed concat: SyntaxError
bt prefix: SyntaxError

=== Escaped braces evaluation ===
Escaped eval: '{42}42{{42}}'
Braces in strings: '{{hello}}1 {2} 3{{world}}'

=== Memory stress test ===
Memory test [10]: 21 chars
Memory test [20]: 51 chars
Memory test [30]: 81 chars
Large values: 20 values

=== Nested quotes and braces tests ===
Nested quotes 1: Template(strings=('', ''), interpolations=(Interpolation('{}', '"{}"', None, ''),))
  Value: {}
  Expression: "{}"
Nested quotes 2: Template(strings=('', ''), interpolations=(Interpolation('hello', "'hello'", None, ''),))
  Value: hello
Nested quotes 3: Template(strings=('', ''), interpolations=(Interpolation('world', '"world"', None, ''),))
  Value: world
Nested quotes 4: Template(strings=('', ''), interpolations=(Interpolation('b', "['a', 'b', 'c'][1]", None, ''),))
  Value: b
Nested quotes 5: Template(strings=('', ''), interpolations=(Interpolation('value', "d['key']", None, ''),))
  Value: value
Escaped braces 1: Template(strings=('{""}',), interpolations=())
  Strings: ('{""}',)
Escaped braces 2: Template(strings=('{}}',), interpolations=())
  Strings: ('{}}',)
Mixed escaped: Template(strings=('{before} ', ' {after}'), interpolations=(Interpolation('test', 'x', None, ''),))
  Strings: ('{before} ', ' {after}')
  Value: test
Escape sequences: Template(strings=('', ''), interpolations=(Interpolation('\n\t', "'\\n\\t'", None, ''),))
  Value repr: '\n\t'
Nested expr: Template(strings=('', ''), interpolations=(Interpolation('{}', 'inner', None, ''),))
  Value: {}

=== Interpolation attribute tests ===
Basic conversion: None
Basic format_spec: 
With conversion: s
With format_spec: :>10
Full conversion: r
Full format_spec: :>10
Template conversion: s
Template format_spec: >10
Both conversion: r
Both format_spec: >10

Basic tests completed!
